pipeline {
  agent any
  options { timestamps() }

  environment {
    AWS_REGION   = 'ap-south-1'
    ACCOUNT_ID   = '218435950846'
    ECR_BACKEND  = "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/camp-travel-backend"
    ECR_FRONTEND = "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/camp-travel-frontend"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Build & Test') {
      steps {
        sh '''
          set -eux
          docker build -t backend:local  -f backend/Dockerfile  backend
          docker build -t frontend:local -f frontend/Dockerfile frontend
          # optional: docker run --rm backend:local python -m pytest || true
        '''
      }
    }

    stage('Preflight: show workspace') {
      steps {
        sh '''
          set -eux
          echo "PWD: $(pwd)"
          echo "GIT HEAD:"; git log -1 --oneline || true
          echo "Workspace listing:"; ls -alh
          echo "----- sonar-project.properties (root) -----"
          [ -f sonar-project.properties ] && sed -n '1,120p' sonar-project.properties || echo "NO sonar-project.properties at repo root"
          echo "----- k8s/sonar-project.properties -----"
          [ -f k8s/sonar-project.properties ] && sed -n '1,120p' k8s/sonar-project.properties || echo "NO k8s/sonar-project.properties"
        '''
      }
    }

    stage('SonarQube') {
      steps {
        withSonarQubeEnv('sonarqube') {
          sh '''
            set -eux
            SETTINGS_FILE="sonar-project.properties"
            [ -f "k8s/sonar-project.properties" ] && SETTINGS_FILE="k8s/sonar-project.properties"

            docker run --rm \
              -e SONAR_HOST_URL="${SONAR_HOST_URL}" \
              -e SONAR_LOGIN="${SONAR_AUTH_TOKEN}" \
              -v "$WORKSPACE:/usr/src" \
              sonarsource/sonar-scanner-cli:5 \
                -Dproject.settings="$SETTINGS_FILE"
                # If you keep all keys in the file above, no extra -D flags are needed here.
          '''
        }
      }
    }

    stage('Trivy image scan') {
      steps {
        sh '''
          set +e
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --no-progress backend:local
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --no-progress frontend:local
          true
        '''
      }
    }

    stage('Login, tag & push to ECR') {
      steps {
        sh '''
          set -eux
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

          COMMIT=$(git rev-parse --short HEAD || echo manual)
          echo "$COMMIT" > COMMIT.sha
          echo "COMMIT=$COMMIT" > env.out

          docker tag backend:local  $ECR_BACKEND:latest
          docker tag backend:local  $ECR_BACKEND:$COMMIT
          docker tag frontend:local $ECR_FRONTEND:latest
          docker tag frontend:local $ECR_FRONTEND:$COMMIT

          docker push $ECR_BACKEND:$COMMIT
          docker push $ECR_BACKEND:latest
          docker push $ECR_FRONTEND:$COMMIT
          docker push $ECR_FRONTEND:latest
        '''
      }
    }

    stage('Deploy to EKS (token-based kubeconfig)') {
      steps {
        withCredentials([
          string(credentialsId: 'k8s-token',      variable: 'K8S_TOKEN'),
          string(credentialsId: 'k8s-api-server', variable: 'K8S_SERVER'),
          file  (credentialsId: 'k8s-ca-crt',     variable: 'K8S_CA')
        ]) {
          sh '''
            set -eux
            [ -f env.out ] && . ./env.out || true

            CERT_B64=$(base64 "$K8S_CA" | tr -d '\\n')

            cat > kubeconfig <<EOF
apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority-data: ${CERT_B64}
    server: ${K8S_SERVER}
  name: camp-travel
contexts:
- context:
    cluster: camp-travel
    user: jenkins
  name: camp-travel
current-context: camp-travel
users:
- name: jenkins
  user:
    token: ${K8S_TOKEN}
EOF

            export KUBECONFIG=$PWD/kubeconfig

            kubectl -n camp-travel apply -f k8s/backend-deployment.yaml
            kubectl -n camp-travel apply -f k8s/frontend-deployment.yaml

            kubectl -n camp-travel set image deploy/backend  backend=${ECR_BACKEND}:${COMMIT}
            kubectl -n camp-travel set image deploy/frontend frontend=${ECR_FRONTEND}:${COMMIT}

            kubectl -n camp-travel rollout status deploy/backend
            kubectl -n camp-travel rollout status deploy/frontend
          '''
        }
      }
    }

    stage('Smoke test (Ingress)') {
      steps {
        withCredentials([
          string(credentialsId: 'k8s-token',       variable: 'K8S_TOKEN'),
          string(credentialsId: 'k8s-api-server',  variable: 'API_SERVER'),
          file  (credentialsId: 'k8s-ca-crt',      variable: 'CA_FILE')
        ]) {
          sh '''
            set -eux
            HOST=$(kubectl -n ingress-nginx get svc ingress-nginx-controller \
              --server="$API_SERVER" --token="$K8S_TOKEN" --certificate-authority="$CA_FILE" \
              -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

            echo "Ingress hostname: $HOST"
            curl -sfI "http://$HOST/"
            curl -sfI "http://$HOST/api/health"
          '''
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'COMMIT.sha', onlyIfSuccessful: false
    }
  }
}
